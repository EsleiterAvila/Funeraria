----trigger---

create or replace function tr_servicio()
returns trigger as $$
declare
fechadif int;
begin

fechadif :=(select count (id_servicioa) from servicioadicional where 
tiposervicioa = new.tiposervicioa);
if(fechadif > 0) then
   raise exception SQLSTATE 'E0008' using
        message = 'Este difunto tiene mas de 48 horas fallecidos ';
	return false;
end if;


return new;
end;
$$ language plpgsql;

create trigger tr_servicio
before insert or update on servicioadicional
for each row
execute procedure tr_servicio();

insert into SERVICIOADICIONAL(ID_SERVICIOA,TIPOSERVICIOA,HORASERVICIOA,COSTOSERVICIOA,FECHASERVICIOA)
values(2,'Embalsamiento','10:00',30,'13/9/2005');

-----CURSOR-----
do $$
declare
 ndatos Record;
 costoservicio int =0;
 /*c_nprueba cursor for select * from "ascenso", "policia" order by "nombres";*/
 c_ncursor cursor for select * from servicio,salavelacion where 
servicio.id_servicio = servicio.id_sala order by costoservicio desc;	
begin
for ndatos in  c_ncursor loop
fetch  c_ncursor into ndatos;
costoservicio= costoservicio  + count (ndatos.id_servicio );
raise notice 'tiposervicio: % , CANTIDAD_DIFUNTO: % , TOTAL: % ', ndatos.tiposervicio,
ndatos.numerovelacion,ndatos.costoservicio;
end loop;
end $$
language 'plpgsql';

-----Procedimiento--
create or replace function ingresosobtenidos(int)
returns  varchar as $$
	DECLARE 
		datoingre alias for $1; datos RECORD;
		cur_datos  cursor for SELECT 
			servicio.tiposervicio as servicios, salavelacion.id_sala as id,servicio.costoservicio as totalservicio,
			salavelacion.nombresala as nombre
			FROM servicio 
		  	inner join salavelacion on servicio.id_servicio = salavelacion.id_sala WHERE salavelacion.id_sala=$1
			group by servicio.tiposervicio , salavelacion.id_sala ,servicio.costoservicio,salavelacion.nombresala;
begin
	OPEN cur_datos;
		FETCh cur_datos INTO datos;
		RAISE NOTICE 
			'
			SALA: % 
        ESTOS SON LOS INGRESOS OBTENIDOS POR SERVICIO:
			',
			datos.nombre;
		while (found) loop 
			RAISE NOTICE 
			'
			SALA: % 
			SERVICIO: %
			total: %
			',
			datos.nombre, datos.servicios, datos.totalservicio;
			FETCh cur_datos INTO datos;
		end loop;
END;
$$ LANGUAGE plpgsql;
SELECT ingresosobtenidos(2)
